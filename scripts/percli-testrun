#!/usr/bin/env node

const args = require('commander');
const Codeceptjs = require( 'codeceptjs' ).codecept;
const { spawn, spawnSync } = require('child_process');

args.version('1.0.0')
    .option("-p, --pattern [pattern]", 'run tests that match pattern')
    .option('-t, --tag [tags]', 'run tests that match a specific tag or tags (comma-sepatated)')
    .option('-f, --feature [features]', 'run test for specific feature or features (comma-sepatated)')
    .option('-s, --showbrowser', 'run tests with browser', false)
    .option('-i, --interactiveshell', 'run codeceptjs in shell mode', false)
    .option('-l, --loglevel [loglevel]', 'specify output level: none, steps, debug, or verbose (default: steps)')
    .option('-d, --dockerinstance [tag]', 'run tests against peregrine docker container. (default: develop)')
    .parse(process.argv);

let overrides = {};

function showMessage(message) {
    console.log("--" + message);
}

if(args.showbrowser) {
    Object.assign(overrides, { "helpers": {"Puppeteer": {"show": "true"}}});
    Object.assign(overrides, { "headlessMode": false});
} else {
    Object.assign(overrides, { "headlessMode": "true"});
}

if(args.pattern) {
    Object.assign(overrides, {"tests": args.pattern});
} else if (args.feature) {
    let features = args.feature.split(",");
    let testPattern = features.length > 1 ? "{" : "";
    for(let i=0; i<features.length; i++) {
        if(i>0) {
            testPattern += ",";
        }
        testPattern += "./tests/admin/" + features[i] + "/*.js";
    }
    testPattern += (features.length > 1) ? "}" : "";

    Object.assign(overrides, {"tests": testPattern});
}

// Later on we'll add run-multiple ability
let runMode;
if(args.interactiveshell) {
    runMode = "shell";
} else {
    runMode = "run";
}

let additionalArgs = [];

// This can get complicated if we want, but for now it will just be a "OR" tags
if(args.tag) {
    let tags = args.tag.split(",");
    let grepPattern = "";

    for(let i=0; i<tags.length; i++) {
        if(i>0) {
            grepPattern += "|";
        }
        grepPattern += String.raw`\@` + tags[i];
    }
    additionalArgs.push("--grep", grepPattern);
}

if((args.loglevel) && (['steps', 'debug', 'verbose'].indexOf(args.loglevel) > 0)) {
    additionalArgs.push("--" + args.loglevel);
} else if(args.loglevel != "none") {
    additionalArgs.push("--steps");
}

// Some parameters get set in the config override, while others are command-line
let spawnArgs;
if(runMode == "shell") {
    spawnArgs = ['codeceptjs', runMode];
} else {
    spawnArgs = ['codeceptjs', runMode, '-o', JSON.stringify(overrides)].concat(additionalArgs);
}

let dockerContainerId = "peregrine-cms-" + Math.floor(Math.random() * 1000000);

if(args.dockerinstance) {
    showMessage("Starting docker container " + dockerContainerId);
    let dockerStartArgs = [dockerContainerId];
    if(typeof args.dockerinstance == "string") {
        dockerStartArgs.push(args.dockerinstance);
    }
    output = spawnSync('scripts/startDocker.sh', dockerStartArgs);

    if(output && output.status != 0) {
        showMessage("Docker unable to start. " + output.stderr.toString());
        return 1;
    }
    showMessage("Docker instance " + dockerContainerId + " started");
}

showMessage("Spawning: npx " + spawnArgs.join(" "));
spawnSync('npx', spawnArgs, {
    stdio: [process.stdin, process.stdout, process.stderr]
});

if(args.dockerinstance) {
    showMessage("Stopping docker instance " + dockerContainerId);
    var results = spawnSync('docker', ['stop', dockerContainerId]);
    showMessage("Container stopped");
}

