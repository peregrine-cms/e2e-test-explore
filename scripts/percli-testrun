#!/usr/bin/env node

const process = require('process');
const args = require('commander');
const Codeceptjs = require( 'codeceptjs' ).codecept;
const { spawn, spawnSync, execSync } = require('child_process');

args.version('1.0.0')
    .option("-p, --pattern [pattern]", 'run tests that match pattern')
    .option('-t, --tag [tags]', 'run tests that match a specific tag or tags (comma-sepatated)')
    .option('-f, --feature [features]', 'run test for specific feature or features (comma-sepatated)')
    .option('-s, --showbrowser', 'run tests with browser', false)
    .option('-h, --headless', 'force headless mode logic, even if browser is running')
    .option('-i, --interactiveshell', 'run codeceptjs in shell mode', false)
    .option('-l, --loglevel [loglevel]', 'specify output level: none, steps, debug, or verbose (default: steps)')
    .option('-r, --reporting', 'include allure reporting output', false)
    .option('-d, --dockerinstance [tag]', 'run tests against peregrine docker container. (default: develop)')
    .parse(process.argv);

let overrides = {};
let isWin = process.platform === "win32";

function showMessage(message) {
    console.log("--" + message);
}

if(args.showbrowser) {
    Object.assign(overrides, { "helpers": {"Puppeteer": {"show": "true"}}});
    Object.assign(overrides, { "headlessMode": !!args.headless});
} else {
    Object.assign(overrides, { "headlessMode": "true"});
}

if(args.pattern) {
    Object.assign(overrides, {"tests": args.pattern});
} else if (args.feature) {
    let features = args.feature.split(",");
    let testPattern = features.length > 1 ? "{" : "";
    for(let i=0; i<features.length; i++) {
        if(i>0) {
            testPattern += ",";
        }
        testPattern += "./tests/admin/" + features[i] + "/*.js";
    }
    testPattern += (features.length > 1) ? "}" : "";

    Object.assign(overrides, {"tests": testPattern});
}

// Later on we'll add run-multiple ability
let runMode;
if(args.interactiveshell) {
    runMode = "shell";
} else {
    runMode = "run";
}

let additionalArgs = [];

// This can get complicated if we want, but for now it will just be a "OR" tags
if(args.tag) {
    let tags = args.tag.split(",");
    let grepPattern = "";

    for(let i=0; i<tags.length; i++) {
        if(i>0) {
            grepPattern += "|";
        }
        grepPattern += String.raw`\@` + tags[i];
    }
    additionalArgs.push("--grep", grepPattern);
}

if((args.loglevel) && (['steps', 'debug', 'verbose'].indexOf(args.loglevel) > 0)) {
    additionalArgs.push("--" + args.loglevel);
} else if(args.loglevel != "none") {
    additionalArgs.push("--steps");
}

if(args.reporting) {
    additionalArgs.push("--plugins","allure");
}

// Some parameters get set in the config override, while others are command-line
let spawnArgs;
if(runMode == "shell") {
    spawnArgs = ['codeceptjs', runMode];
} else {
	let jsonString = JSON.stringify(overrides);
	if(isWin) {
	    //The json needs to be surrounded with quotes and have its internal quotes escaped on windows
	    jsonString = '"' + jsonString.replace(/"/g, '\\"') + '"';
	}

    spawnArgs = ['codeceptjs', runMode, '-o', jsonString].concat(additionalArgs);
}

let dockerContainerId = "peregrine-cms-" + Math.floor(Math.random() * 1000000);

if(args.dockerinstance) {
    showMessage("Starting docker container " + dockerContainerId);

    let dockerStartArgs = ['run', '-d', '--rm', '-p', '8000:8000', '--name=' + dockerContainerId,
        'peregrinecms/peregrine-cms:' + ((typeof args.dockerinstance == "string") ? args.dockerinstance : "develop")];

    showMessage("Spawning: docker " + dockerStartArgs.join(" "));
    let results = spawnSync('docker', dockerStartArgs);

    if(results && results.status != 0) {
        showMessage("Docker unable to start. " + results.stderr.toString());
        return 1;
    }

    showMessage("Docker process started, awaiting health check...");

    // now we need to wait for it to startup
    let ready = false;
    let now = new Date().getTime();
    while(!ready) {
        let status = spawnSync('docker',
            ['inspect', '-f', '{{.State.Health.Status}}', dockerContainerId]);

        if(status.stdout.toString().indexOf("healthy")  >= 0) {
            ready = true;
        }

        // this is a new process every time it runs, so waiting a second between steps
        // from stackoverflow, don't use this method of sleeping in anything but a console script
        var waitTill = new Date(new Date().getTime() + 1000);
        while(waitTill > new Date()){}
    }

    showMessage("Docker instance " + dockerContainerId + " started after " + (new Date().getTime() - now) + " milliseconds");
}

showMessage("Spawning: npx " + spawnArgs.join(" "));


if(isWin) {
    //spawnSync fails silently in the windows command prompt,
    //but execSync works if the arguments are escaped and added to the command
	execSync('npx ' + spawnArgs.join(" "), {
		stdio: [process.stdin, process.stdout, process.stderr]
	});
} else {
    spawnSync('npx', spawnArgs, {
        stdio: [process.stdin, process.stdout, process.stderr]
    });
}


if(args.dockerinstance) {
    showMessage("Stopping docker instance " + dockerContainerId);
    var results = spawnSync('docker', ['stop', dockerContainerId]);
    showMessage("Container stopped");
}

